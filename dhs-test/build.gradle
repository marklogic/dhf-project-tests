//buildscript {
//    repositories {
//        jcenter()
//        maven { url "https://plugins.gradle.org/m2/" }
//        maven { url 'http://distro.marklogic.com/nexus/repository/maven-snapshots/' }
//        maven {url 'http://distro.marklogic.com/nexus/repository/maven-releases/'}
//    }
//    dependencies {
//        if (project.hasProperty("testing")) {
//            classpath "com.marklogic:ml-data-hub:5.3-SNAPSHOT"
//            classpath "com.marklogic:marklogic-data-hub:5.3-SNAPSHOT"
//        } else {
//            classpath "com.marklogic:ml-data-hub:5.2.1"
//        }
//    }
//}

plugins {
    id "groovy"
    id "java-gradle-plugin"
    id 'net.saliman.properties' version '1.5.1'
    id 'org.springframework.boot' version '2.1.3.RELEASE'
    id "io.spring.dependency-management" version "1.0.7.RELEASE"
    id 'com.marklogic.ml-data-hub' version '5.2.1'
}

repositories {
    jcenter()
    maven { url 'http://distro.marklogic.com/nexus/repository/maven-snapshots/'}
}

//apply plugin: "com.marklogic.ml-data-hub"

bootJar.enabled = false

dependencies {
//    if (project.hasProperty("testing")) {
//        compile ('com.marklogic:marklogic-data-hub:5.3-SNAPSHOT') {
//            exclude group: 'ch.qos.logback'
//        }
//    } else {
//        compile ('com.marklogic:marklogic-data-hub:5.2.1') {
//            exclude group: 'ch.qos.logback'
//        }
//    }
    compile ('com.marklogic:marklogic-data-hub:5.2.1') {
        exclude group: 'ch.qos.logback'
    }
    compile gradleApi()
    testCompile localGroovy()
    testCompile gradleTestKit()
    testCompile ('org.springframework.boot:spring-boot-starter-test:2.1.3.RELEASE')  {
        exclude module: "logback-classic"
    }
    testCompile 'org.junit.jupiter:junit-jupiter-api:5.3.2'
    testRuntime 'org.junit.platform:junit-platform-runner:1.4.0'
    testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.3.2'
}

def environmentName = environmentName ? environmentName : 'local'

task setUpDatahub() {
    if(environmentName.equals("aws") || environmentName.equals("azure")) {
        setUpDatahub.dependsOn('hubDeployAsDeveloper')
    } else {
        setUpDatahub.dependsOn('mlDeploy')
    }
}


task tearDown(type: Exec) {
    if(environmentName.equals("aws") || environmentName.equals("azure")) {
        tearDown.dependsOn('hubDeployAsDeveloper')
    } else {
        workingDir './'
        commandLine './gradlew', 'mlUndeploy', '-Pconfirm=true'
    }
}

test {
    useJUnitPlatform()
    minHeapSize = "128m"
    maxHeapSize = "256m"
    classpath = project.sourceSets.test.runtimeClasspath
    testLogging {
        // Make test events are logged and standard out or error is shown
        events 'started','passed', 'skipped', 'failed'
        exceptionFormat 'full'
        showStandardStreams = true
    }
    systemProperty "environmentName", environmentName
}

//test.dependsOn(setUpDatahub)